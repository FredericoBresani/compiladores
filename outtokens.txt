<TokenTypes.HASHTAG, #>
<TokenTypes.INCLUDE, include>
<TokenTypes.LIB, IOApi>
<TokenTypes.HASHTAG, #>
<TokenTypes.INCLUDE, include>
<TokenTypes.LIB, math.h>
<TokenTypes.INT, int>
<TokenTypes.IDENTIFIER, n>
<TokenTypes.ASSIGN, =>
<TokenTypes.NUMBER, 43.988>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.PRINT, print>
<TokenTypes.PARENTHESES, (>
<TokenTypes.STRING, "Quantos numeros voce quer imprimir?">
<TokenTypes.PARENTHESES, )>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.READ, read>
<TokenTypes.PARENTHESES, (>
<TokenTypes.STRING, "%i">
<TokenTypes.COMMA, ,>
<TokenTypes.REFERENCE, &>
<TokenTypes.IDENTIFIER, n>
<TokenTypes.PARENTHESES, )>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.INT, int>
<TokenTypes.IDENTIFIER, numeros>
<TokenTypes.SQUARE_BRACKETS, [>
<TokenTypes.IDENTIFIER, n>
<TokenTypes.SQUARE_BRACKETS, ]>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.FOR, for>
<TokenTypes.PARENTHESES, (>
<TokenTypes.INT, int>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.ASSIGN, =>
<TokenTypes.NUMBER, 0>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.GREATER_EQUAL, >=>
<TokenTypes.IDENTIFIER, n>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.PLUS, +>
<TokenTypes.PLUS, +>
<TokenTypes.PARENTHESES, )>
<TokenTypes.CURLY_BRACES, {>
<TokenTypes.IF, if>
<TokenTypes.PARENTHESES, (>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.EQUAL, ==>
<TokenTypes.NUMBER, 0>
<TokenTypes.PARENTHESES, )>
<TokenTypes.CURLY_BRACES, {>
<TokenTypes.IDENTIFIER, numeros>
<TokenTypes.SQUARE_BRACKETS, [>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.SQUARE_BRACKETS, ]>
<TokenTypes.ASSIGN, =>
<TokenTypes.MINUS, ->
<TokenTypes.NUMBER, 1>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.CURLY_BRACES, }>
<TokenTypes.ELSE, else>
<TokenTypes.IF, if>
<TokenTypes.PARENTHESES, (>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.EQUAL, ==>
<TokenTypes.IDENTIFIER, n>
<TokenTypes.PARENTHESES, )>
<TokenTypes.CURLY_BRACES, {>
<TokenTypes.IDENTIFIER, numeros>
<TokenTypes.SQUARE_BRACKETS, [>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.SQUARE_BRACKETS, ]>
<TokenTypes.ASSIGN, =>
<TokenTypes.MINUS, ->
<TokenTypes.NUMBER, 2>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.CURLY_BRACES, }>
<TokenTypes.ELSE, else>
<TokenTypes.CURLY_BRACES, {>
<TokenTypes.IDENTIFIER, numeros>
<TokenTypes.SQUARE_BRACKETS, [>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.SQUARE_BRACKETS, ]>
<TokenTypes.ASSIGN, =>
<TokenTypes.POW, pow>
<TokenTypes.PARENTHESES, (>
<TokenTypes.IDENTIFIER, i>
<TokenTypes.COMMA, ,>
<TokenTypes.NUMBER, 2>
<TokenTypes.PARENTHESES, )>
<TokenTypes.SEMICOLON, ;>
<TokenTypes.CURLY_BRACES, }>
<TokenTypes.CURLY_BRACES, }>
